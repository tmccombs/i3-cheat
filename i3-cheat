#!/usr/bin/env python3

import json
import os
import re
import socket
import struct
import subprocess
from collections import namedtuple
from pathlib import Path

import gi

gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gdk, Gio, GLib, Gtk

Binding = namedtuple('Binding', ['key', 'command', 'kind', 'release_key'])


def get_sock_path():
    '''Get the socket path for i3 (or sway)'''
    path = os.environ.get('I3SOCK')
    if not path:
        path = os.environ.get('SWAYSOCK')
    if not path:
        path = subprocess.check_output(
                ['i3', '--get-socketpath']).strip().decode()
    return path


GET_CONFIG = 9
MAGIC = b'i3-ipc'
MAGIC_LEN = len(MAGIC)


def get_config():
    '''Get the configuration for the running i3 (or sway)'''
    custom_path = os.environ.get('I3_CONFIG_PATH')
    if custom_path:
        with open(custom_path) as f:
            return f.read()
    socket_path = get_sock_path()
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.settimeout(0.25)
    sock.connect(socket_path)
    sock.send(MAGIC + struct.pack('II', 0, GET_CONFIG))
    try:
        header = sock.recv(MAGIC_LEN + 8)
    except socket.timeout:
        # older versions of i3 don't have a GET_CONFIG ipc function
        # fall back to reading directly from config
        return Path('~/.config/i3/config').expanduser().read_text()
    assert header[0:MAGIC_LEN] == MAGIC, "Unexpected magic number"
    (size, typ) = struct.unpack('II', header[MAGIC_LEN:])
    assert typ == GET_CONFIG, "Unexpected response type"
    config = sock.recv(size)
    sock.close()

    return json.loads(config)['config']


class Category:
    def __init__(self, name, suffix=None, pango=False):
        self.name = name
        self._bindings = []
        self.pango = bool(pango)
        if suffix:
            self.label = ' '.join([name, suffix])
        else:
            self.label = name

    def add_binding(self, binding):
        '''Add a binding to the category'''
        self._bindings.append(binding)

    def bindings(self):
        '''Get an iterator over the bindings'''
        return iter(self._bindings)


def config_lines(content):
    '''Read the lines of the config file'''
    buf = None
    in_annotation = False
    for line in content.splitlines():
        line = line.strip()
        if in_annotation:
            m = line.startswith('#*')
            if m:
                buf += line[2:]
                continue
            else:
                yield buf
                buf = None
                in_annotation = False
        if buf is None:
            if line.startswith('#*'):
                in_annotation = True
                buf = line
                continue
            if line.startswith('#'):
                continue
            if line.endswith('\\'):
                buf = line[:-1]
            else:
                yield line
        else:
            if line.endswith('\\'):
                buf += line[:-1]
            else:
                yield buf + line
                buf = None


def parse_config(config):
    '''Parse the configuration to get the bindings.'''
    default_category = Category('default', 'mode')
    categories = [default_category]
    category = default_category
    user_categories = {}

    bind_re = re.compile(r'\s*bind(sym|code) +(--release +)?(\S+) +(.+)')
    mode_re = re.compile(r'\s*mode +(--pango_markup +)?(.+?) +?\{$')
    set_re = re.compile(r'\s*set (\$\S+)\s+(.+)')
    mode_end_re = re.compile(r'\s*\}')
    annotation_re = re.compile(r'^#\*\s*(?:(.+):\s*)?(.*)')
    variables = []

    def do_replacements(line):
        for key, value in variables:
            line = line.replace(key, value)
        return line

    def upsert_variable(key, value):
        new_var = (key, value)
        for i, (k, _) in enumerate(variables):
            if len(key) > len(k):
                # insert before shorter keys,
                # in case there is a prefix of this key
                variables.insert(i, new_var)
                return
            if key == k:
                # replace
                variables[i] = new_var
                return
        variables.append(new_var)

    def get_user_category(category):
        cat = user_categories.get(category)
        if not cat:
            cat = Category(category)
            user_categories[category] = cat
            categories.append(cat)
        return cat

    annotation = None
    has_annotation = False
    in_mode = False

    for line in config_lines(config):
        # unset description if it wasn't the last line
        if has_annotation:
            has_annotation = False
        else:
            annotation = None

        match = annotation_re.match(line)
        if match:
            annotation = match.groups()
            has_annotation = True
            continue
        # match set first, because variable substitution
        # isn't done on set lines
        match = set_re.match(line)
        if match:
            upsert_variable(match.group(1), match.group(2))
            continue

        line = do_replacements(line)
        match = bind_re.match(line)
        if match:
            description = annotation and annotation[1]
            binding = Binding(
                    match.group(3),
                    description or match.group(4),
                    match.group(1),
                    bool(match.group(2)))
            category.add_binding(binding)
            if annotation and annotation[0]:
                c = get_user_category(annotation[0])
                c.add_binding(binding)
            continue
        match = mode_re.match(line)
        if match:
            category = Category(
                    match.group(2).strip('"'),
                    'mode',
                    match.group(1))
            categories.append(category)
            in_mode = True
        elif in_mode and mode_end_re.match(line):
            category = default_category
    return categories


def get_bindings():
    '''Get the bindings from the active config'''
    return parse_config(get_config())


def print_bindings(categories):
    '''Print an output of the bindings in i3'''
    for category in categories:
        print("{}:".format(category.name))

        width = max(len(b.key) for b in category.bindings())

        for binding in category.bindings():
            print("\t{:<{width}}\t{}".format(binding.key, binding.command, width=width))


def category_label(category):
    'Create a GTK label for category'''
    label = Gtk.Label()
    if category.pango:
        label.set_markup(category.label)
    else:
        label.set_text(category.label)
    return label


class I3CheatWindow(Gtk.ApplicationWindow):
    def __init__(self, categories, **kwargs):
        '''Create an I3Cheat instance'''
        super().__init__(**kwargs)

        self._tab_lookup = dict()
        self.set_default_size(-1, 740)

        accel_group = Gtk.AccelGroup()
        accel_group.connect(Gdk.KEY_h, 0, 0, self.prev_category)
        accel_group.connect(Gdk.KEY_l, 0, 0, self.next_category)
        accel_group.connect(Gdk.KEY_q, 0, 0, self._quit)
        accel_group.connect(Gdk.KEY_Escape, 0, 0, self._quit)
        self.add_accel_group(accel_group)

        self.set_type_hint(Gdk.WindowTypeHint.DIALOG)

        self.notebook = Gtk.Notebook(scrollable=True)
        for category in categories:
            self._init_category(category)

        self.add(self.notebook)
        self.current_page().grab_focus()

        style = Gtk.CssProvider()
        style.load_from_data(I3Cheat.CSS)
        Gtk.StyleContext.add_provider_for_screen(
            Gdk.Screen.get_default(),
            style,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

    def current_page(self):
        return self.notebook.get_nth_page(self.notebook.get_current_page())

    def _init_category(self, category):
        store = Gtk.ListStore(str, str)
        for binding in category.bindings():
            key = binding.key
            if binding.kind == 'code':
                key = 'Code: ' + key
            store.append([key, binding.command])

        tree = Gtk.TreeView(model=store, headers_visible=False, enable_search=False, search_column=1)
        tree.get_selection().set_mode(Gtk.SelectionMode.BROWSE)
        tree.set_cursor(Gtk.TreePath(0), None, False)
        key_column = Gtk.TreeViewColumn("Binding", Gtk.CellRendererText(), text=0)
        key_column.set_spacing(140)
        tree.append_column(key_column)
        command_column = Gtk.TreeViewColumn("Command", Gtk.CellRendererText(), text=1)
        command_column.set_spacing(140)
        tree.append_column(command_column)

        scrolled = Gtk.ScrolledWindow()
        scrolled.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        scrolled.add(tree)

        self._tab_lookup[category.name] = self.notebook.get_n_pages()
        self.notebook.append_page(scrolled, category_label(category))

    def focus_category(self, category):
        'Focus on a category by its name'
        idx = self._tab_lookup.get(category, 0)
        self.notebook.set_current_page(idx)

    def next_category(self, *args):
        'move focus to the next category'
        self.notebook.next_page()

    def prev_category(self, *args):
        self.notebook.prev_page()

    def _quit(self, *args):
        self.close()


class I3Cheat(Gtk.Application):
    CSS = b"""
        * {
            font-size: 16px;
        }
        @binding-set i3-binds {
            bind "slash" { "start-interactive-search" () };
            bind "j" { "move-cursor" (display-lines, 1) };
            bind "k" { "move-cursor" (display-lines, -1) };
        }
        GtkTreeView, treeview {
            -gtk-key-bindings: i3-binds;
        }
    """

    def __init__(self):
        super().__init__(application_id="com.github.tmccombs.i3-cheat", flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE)
        self.add_main_option('category', ord('c'), 0, GLib.OptionArg.STRING, "Category or mode tab to open", "CATEGORY")
        self._window = None

    def do_command_line(self, cl):
        if not self._window:
            self._window = I3CheatWindow(self.categories, application=self, title="I3 Cheatsheet")
            self._window.show_all()

        category = cl.get_options_dict().lookup_value('category')
        if category:
            category = category.get_string()
            self._window.focus_category(category)
        self._window.present()
        return 0

    def do_startup(self):
        Gtk.Application.do_startup(self)
        self.categories = get_bindings()


if __name__ == '__main__':
    import signal
    import sys
    app = I3Cheat()
    # so ctrl+c still works
    GLib.unix_signal_add(GLib.PRIORITY_DEFAULT, signal.SIGINT, app.quit)
    app.run(sys.argv)
